@page "/register/{EventId}"
@inject EventService EventSvc
@inject NavigationManager NavigationManager
@using EventEaseApp.Models
@using System.ComponentModel.DataAnnotations

<h3>Register for Event: @eventDetails?.EventName</h3>

@if (eventDetails != null)
{
    <EditForm Model="@newAttendee" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="name" class="form-label">Name:</label>
            <InputText id="name" class="form-control" @bind-Value="newAttendee.Name" />
            <ValidationMessage For="() => newAttendee.Name" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email:</label>
            <InputText id="email" type="email" class="form-control" @bind-Value="newAttendee.Email" />
            <ValidationMessage For="() => newAttendee.Email" />
        </div>

        <button type="submit" class="btn btn-primary">Register</button>
        <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
    </EditForm>
}
else
{
    <p>Loading event details...</p>
}

@code {
    [Parameter]
    public string EventId { get; set; } = string.Empty;

    private Event? eventDetails;
    private Attendee newAttendee = new();
    private Guid eventGuid;

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(EventId, out eventGuid))
        {
            eventDetails = await EventSvc.GetEventByIdAsync(eventGuid);
        }
        else
        {
            // Handle invalid GUID format
            NavigationManager.NavigateTo("/events"); // Or show an error message
        }
    }

    private async Task HandleRegistration()
    {
        if (eventDetails != null)
        {
            await EventSvc.RegisterAttendeeAsync(eventGuid, newAttendee);
            NavigateBack(); // Navigate back to the event list after registration
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/events");
    }
}
