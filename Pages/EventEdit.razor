@page "/event/edit"
@page "/event/edit/{Id:guid}"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@inject EventService EventSvc
@inject NavigationManager NavigationMgr

<PageTitle>@(IsNewEvent ? "Create Event" : "Edit Event")</PageTitle>

<h1>@(IsNewEvent ? "Create New Event" : "Edit Event")</h1>

@if (eventModel == null) // Simplified condition: Only render form when eventModel is not null
{
    <p><em>@(IsNewEvent ? "Initializing..." : "Loading event details...")</em></p>
}
else
{
    <EditForm Model="@eventModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="eventName" class="form-label">Event Name:</label>
            <InputText id="eventName" class="form-control" @bind-Value="eventModel.EventName" />
            <ValidationMessage For="@(() => eventModel.EventName)" />
        </div>

        <div class="mb-3">
            <label for="eventDate" class="form-label">Date:</label>
            <InputDate id="eventDate" class="form-control" @bind-Value="eventModel.Date" />
            <ValidationMessage For="@(() => eventModel.Date)" />
        </div>

        <div class="mb-3">
            <label for="eventLocation" class="form-label">Location:</label>
            <InputText id="eventLocation" class="form-control" @bind-Value="eventModel.Location" />
            <ValidationMessage For="@(() => eventModel.Location)" />
        </div>

        <button type="submit" class="btn btn-primary">@(IsNewEvent ? "Create Event" : "Update Event")</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private Event? eventModel; // Renamed from eventToEdit for clarity
    private bool IsNewEvent => Id == Guid.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (IsNewEvent)
        {
            eventModel = new Event { Date = DateTime.Today }; // Initialize for creation
        }
        else
        {
            eventModel = await EventSvc.GetEventByIdAsync(Id);
            if (eventModel == null)
            {
                // Handle case where event ID is provided but not found
                NavigationMgr.NavigateTo("/events");
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        if (eventModel != null)
        {
            if (IsNewEvent)
            {
                await EventSvc.AddEventAsync(eventModel);
            }
            else
            {
                await EventSvc.UpdateEventAsync(eventModel);
            }
            NavigationMgr.NavigateTo("/events"); // Navigate to the updated list
        }
    }

    private void CancelEdit()
    {
        NavigationMgr.NavigateTo("/events"); // Navigate to the updated list
    }
}
